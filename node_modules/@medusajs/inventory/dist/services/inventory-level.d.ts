import { CreateInventoryLevelInput, FilterableInventoryLevelProps, FindConfig, IEventBusService, SharedContext } from "@medusajs/types";
import { DeepPartial, EntityManager } from "typeorm";
import { InventoryLevel } from "../models";
type InjectedDependencies = {
    eventBusService: IEventBusService;
    manager: EntityManager;
};
export default class InventoryLevelService {
    static Events: {
        CREATED: string;
        UPDATED: string;
        DELETED: string;
        RESTORED: string;
    };
    protected readonly manager_: EntityManager;
    protected readonly eventBusService_: IEventBusService | undefined;
    constructor({ eventBusService, manager }: InjectedDependencies);
    /**
     * Retrieves a list of inventory levels based on the provided selector and configuration.
     * @param selector - An object containing filterable properties for inventory levels.
     * @param config - An object containing configuration options for the query.
     * @param context
     * @return Array of inventory levels.
     */
    list(selector?: FilterableInventoryLevelProps, config?: FindConfig<InventoryLevel>, context?: SharedContext): Promise<InventoryLevel[]>;
    /**
     * Retrieves a list of inventory levels and a count based on the provided selector and configuration.
     * @param selector - An object containing filterable properties for inventory levels.
     * @param config - An object containing configuration options for the query.
     * @param context
     * @return An array of inventory levels and a count.
     */
    listAndCount(selector?: FilterableInventoryLevelProps, config?: FindConfig<InventoryLevel>, context?: SharedContext): Promise<[InventoryLevel[], number]>;
    /**
     * Retrieves a single inventory level by its ID.
     * @param inventoryLevelId - The ID of the inventory level to retrieve.
     * @param config - An object containing configuration options for the query.
     * @param context
     * @return A inventory level.
     * @throws If the inventory level ID is not defined or the given ID was not found.
     */
    retrieve(inventoryLevelId: string, config?: FindConfig<InventoryLevel>, context?: SharedContext): Promise<InventoryLevel>;
    /**
     * Creates a new inventory level.
     * @param data - An object containing the properties for the new inventory level.
     * @param context
     * @return The created inventory level.
     */
    create(data: CreateInventoryLevelInput[], context?: SharedContext): Promise<InventoryLevel[]>;
    /**
     * Updates an existing inventory level.
     * @param inventoryLevelId - The ID of the inventory level to update.
     * @param data - An object containing the properties to update on the inventory level.
     * @param context
     * @return The updated inventory level.
     * @throws If the inventory level ID is not defined or the given ID was not found.
     */
    update(inventoryLevelId: string, data: Omit<DeepPartial<InventoryLevel>, "id" | "created_at" | "metadata" | "deleted_at">, context?: SharedContext): Promise<InventoryLevel>;
    /**
     * Adjust the reserved quantity for an inventory item at a specific location.
     * @param inventoryItemId - The ID of the inventory item.
     * @param locationId - The ID of the location.
     * @param quantity - The quantity to adjust from the reserved quantity.
     * @param context
     */
    adjustReservedQuantity(inventoryItemId: string, locationId: string, quantity: number, context?: SharedContext): Promise<void>;
    /**
     * Deletes inventory levels by inventory Item ID.
     * @param inventoryItemId - The ID or IDs of the inventory item to delete inventory levels for.
     * @param context
     */
    deleteByInventoryItemId(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Restores inventory levels by inventory Item ID.
     * @param inventoryItemId - The ID or IDs of the inventory item to restore inventory levels for.
     * @param context
     */
    restoreByInventoryItemId(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes an inventory level by ID.
     * @param inventoryLevelId - The ID or IDs of the inventory level to delete.
     * @param context
     */
    delete(inventoryLevelId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes inventory levels by location ID.
     * @param locationId - The ID of the location to delete inventory levels for.
     * @param context
     */
    deleteByLocationId(locationId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Gets the total stocked quantity for a specific inventory item at multiple locations.
     * @param inventoryItemId - The ID of the inventory item.
     * @param locationIds - The IDs of the locations.
     * @param context
     * @return The total stocked quantity.
     */
    getStockedQuantity(inventoryItemId: string, locationIds: string[] | string, context?: SharedContext): Promise<number>;
    /**
     * Gets the total available quantity for a specific inventory item at multiple locations.
     * @param inventoryItemId - The ID of the inventory item.
     * @param locationIds - The IDs of the locations.
     * @param context
     * @return The total available quantity.
     */
    getAvailableQuantity(inventoryItemId: string, locationIds: string[] | string, context?: SharedContext): Promise<number>;
    /**
     * Gets the total reserved quantity for a specific inventory item at multiple locations.
     * @param inventoryItemId - The ID of the inventory item.
     * @param locationIds - The IDs of the locations.
     * @param context
     * @return The total reserved quantity.
     */
    getReservedQuantity(inventoryItemId: string, locationIds: string[] | string, context?: SharedContext): Promise<number>;
}
export {};
