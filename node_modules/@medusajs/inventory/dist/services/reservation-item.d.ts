import { CreateReservationItemInput, FilterableReservationItemProps, FindConfig, IEventBusService, SharedContext, UpdateReservationItemInput } from "@medusajs/types";
import { EntityManager } from "typeorm";
import { InventoryLevelService } from ".";
import { ReservationItem } from "../models";
type InjectedDependencies = {
    eventBusService: IEventBusService;
    manager: EntityManager;
    inventoryLevelService: InventoryLevelService;
};
export default class ReservationItemService {
    static Events: {
        CREATED: string;
        UPDATED: string;
        DELETED: string;
    };
    protected readonly manager_: EntityManager;
    protected readonly eventBusService_: IEventBusService | undefined;
    protected readonly inventoryLevelService_: InventoryLevelService;
    constructor({ eventBusService, inventoryLevelService, manager, }: InjectedDependencies);
    /**
     * Lists reservation items that match the provided filter.
     * @param selector - Filters to apply to the reservation items.
     * @param config - Configuration for the query.
     * @param context
     * @return Array of reservation items that match the selector.
     */
    list(selector?: FilterableReservationItemProps, config?: FindConfig<ReservationItem>, context?: SharedContext): Promise<ReservationItem[]>;
    /**
     * Lists reservation items that match the provided filter and returns the total count.
     * @param selector - Filters to apply to the reservation items.
     * @param config - Configuration for the query.
     * @param context
     * @return Array of reservation items that match the selector and the total count.
     */
    listAndCount(selector?: FilterableReservationItemProps, config?: FindConfig<ReservationItem>, context?: SharedContext): Promise<[ReservationItem[], number]>;
    /**
     * Retrieves a reservation item by its id.
     * @param reservationItemId - The id of the reservation item to retrieve.
     * @param config - Configuration for the query.
     * @param context
     * @return The reservation item with the provided id.
     * @throws If reservationItemId is not defined or if the reservation item was not found.
     */
    retrieve(reservationItemId: string, config?: FindConfig<ReservationItem>, context?: SharedContext): Promise<ReservationItem>;
    /**
     * Create a new reservation item.
     * @param data - The reservation item data.
     * @param context
     * @return The created reservation item.
     */
    create(data: CreateReservationItemInput[], context?: SharedContext): Promise<ReservationItem[]>;
    /**
     * Update a reservation item.
     * @param reservationItemId - The reservation item's id.
     * @param data - The reservation item data to update.
     * @param context
     * @return The updated reservation item.
     */
    update(reservationItemId: string, data: UpdateReservationItemInput, context?: SharedContext): Promise<ReservationItem>;
    /**
     * Deletes a reservation item by line item id.
     * @param lineItemId - the id of the line item to delete.
     * @param context
     */
    deleteByLineItem(lineItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes reservation items by location ID.
     * @param locationId - The ID of the location to delete reservations for.
     * @param context
     */
    deleteByLocationId(locationId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes a reservation item by id.
     * @param reservationItemId - the id of the reservation item to delete.
     * @param context
     */
    delete(reservationItemId: string | string[], context?: SharedContext): Promise<void>;
}
export {};
