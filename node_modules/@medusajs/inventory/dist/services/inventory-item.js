"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@medusajs/utils");
const typeorm_1 = require("typeorm");
const models_1 = require("../models");
const build_query_1 = require("../utils/build-query");
const query_1 = require("../utils/query");
class InventoryItemService {
    constructor({ eventBusService, manager }) {
        this.manager_ = manager;
        this.eventBusService_ = eventBusService;
    }
    /**
     * @param selector - Filter options for inventory items.
     * @param config - Configuration for query.
     * @param context
     * @return Resolves to the list of inventory items that match the filter.
     */
    async list(selector = {}, config = { relations: [], skip: 0, take: 10 }, context = {}) {
        const queryBuilder = (0, query_1.getListQuery)(context.transactionManager ?? this.manager_, selector, config);
        return await queryBuilder.getMany();
    }
    /**
     * Retrieves an inventory item by its id.
     * @param inventoryItemId - the id of the inventory item to retrieve.
     * @param config - the configuration options for the find operation.
     * @param context
     * @return The retrieved inventory item.
     * @throws If the inventory item id is not defined or if the inventory item is not found.
     */
    async retrieve(inventoryItemId, config = {}, context = {}) {
        if (!(0, utils_1.isDefined)(inventoryItemId)) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `"inventoryItemId" must be defined`);
        }
        const manager = context.transactionManager ?? this.manager_;
        const itemRepository = manager.getRepository(models_1.InventoryItem);
        const query = (0, build_query_1.buildQuery)({ id: inventoryItemId }, config);
        const [inventoryItem] = await itemRepository.find(query);
        if (!inventoryItem) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `InventoryItem with id ${inventoryItemId} was not found`);
        }
        return inventoryItem;
    }
    /**
     * @param selector - Filter options for inventory items.
     * @param config - Configuration for query.
     * @param context
     * @return - Resolves to the list of inventory items that match the filter and the count of all matching items.
     */
    async listAndCount(selector = {}, config = { relations: [], skip: 0, take: 10 }, context = {}) {
        const queryBuilder = (0, query_1.getListQuery)(context.transactionManager ?? this.manager_, selector, config);
        return await queryBuilder.getManyAndCount();
    }
    /**
     * @param data
     * @param context
     * @param data
     * @param context
     */
    async create(data, context = {}) {
        const manager = context.transactionManager;
        const itemRepository = manager.getRepository(models_1.InventoryItem);
        const inventoryItem = itemRepository.create(data.map((tc) => ({
            sku: tc.sku,
            origin_country: tc.origin_country,
            metadata: tc.metadata,
            hs_code: tc.hs_code,
            mid_code: tc.mid_code,
            material: tc.material,
            weight: tc.weight,
            length: tc.length,
            height: tc.height,
            width: tc.width,
            requires_shipping: tc.requires_shipping,
            description: tc.description,
            thumbnail: tc.thumbnail,
            title: tc.title,
        })));
        const result = await itemRepository.save(inventoryItem);
        await this.eventBusService_?.emit?.(InventoryItemService.Events.CREATED, {
            ids: result.map((i) => i.id),
        });
        return result;
    }
    /**
     * @param inventoryItemId - The id of the inventory item to update.
     * @param data
     * @param context
     * @param context
     * @return The updated inventory item.
     */
    async update(inventoryItemId, data, context = {}) {
        const manager = context.transactionManager;
        const itemRepository = manager.getRepository(models_1.InventoryItem);
        const item = await this.retrieve(inventoryItemId, undefined, context);
        const shouldUpdate = Object.keys(data).some((key) => {
            return item[key] !== data[key];
        });
        if (shouldUpdate) {
            itemRepository.merge(item, data);
            await itemRepository.save(item);
            await this.eventBusService_?.emit?.(InventoryItemService.Events.UPDATED, {
                id: item.id,
            });
        }
        return item;
    }
    /**
     * @param inventoryItemId - The id of the inventory item to delete.
     * @param context
     */
    async delete(inventoryItemId, context = {}) {
        const manager = context.transactionManager;
        const itemRepository = manager.getRepository(models_1.InventoryItem);
        const ids = Array.isArray(inventoryItemId)
            ? inventoryItemId
            : [inventoryItemId];
        await itemRepository.softDelete({ id: (0, typeorm_1.In)(ids) });
        await this.eventBusService_?.emit?.(InventoryItemService.Events.DELETED, {
            ids: inventoryItemId,
        });
    }
    /**
     * @param inventoryItemId - The id of the inventory item to restore.
     * @param context
     */
    async restore(inventoryItemId, context = {}) {
        const manager = context.transactionManager;
        const itemRepository = manager.getRepository(models_1.InventoryItem);
        const ids = Array.isArray(inventoryItemId)
            ? inventoryItemId
            : [inventoryItemId];
        await itemRepository.restore({ id: (0, typeorm_1.In)(ids) });
        await this.eventBusService_?.emit?.(InventoryItemService.Events.RESTORED, {
            ids: inventoryItemId,
        });
    }
}
InventoryItemService.Events = {
    CREATED: "inventory-item.created",
    UPDATED: "inventory-item.updated",
    DELETED: "inventory-item.deleted",
    RESTORED: "inventory-item.restored",
};
exports.default = InventoryItemService;
__decorate([
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "list", null);
__decorate([
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "retrieve", null);
__decorate([
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "listAndCount", null);
__decorate([
    (0, utils_1.InjectEntityManager)(),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "create", null);
__decorate([
    (0, utils_1.InjectEntityManager)(),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "update", null);
__decorate([
    (0, utils_1.InjectEntityManager)(),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "delete", null);
__decorate([
    (0, utils_1.InjectEntityManager)(),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], InventoryItemService.prototype, "restore", null);
//# sourceMappingURL=inventory-item.js.map