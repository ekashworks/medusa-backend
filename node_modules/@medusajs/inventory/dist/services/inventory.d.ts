import { InternalModuleDeclaration } from "@medusajs/modules-sdk";
import { CreateInventoryItemInput, CreateInventoryLevelInput, CreateReservationItemInput, FilterableInventoryItemProps, FilterableInventoryLevelProps, FilterableReservationItemProps, FindConfig, IInventoryService, InventoryItemDTO, InventoryLevelDTO, ModuleJoinerConfig, ReservationItemDTO, SharedContext, UpdateInventoryLevelInput, UpdateReservationItemInput } from "@medusajs/types";
import { EntityManager } from "typeorm";
import InventoryItemService from "./inventory-item";
import InventoryLevelService from "./inventory-level";
import ReservationItemService from "./reservation-item";
type InjectedDependencies = {
    manager: EntityManager;
    inventoryItemService: InventoryItemService;
    inventoryLevelService: InventoryLevelService;
    reservationItemService: ReservationItemService;
};
export default class InventoryService implements IInventoryService {
    protected readonly moduleDeclaration?: InternalModuleDeclaration | undefined;
    protected readonly manager_: EntityManager;
    protected readonly inventoryItemService_: InventoryItemService;
    protected readonly reservationItemService_: ReservationItemService;
    protected readonly inventoryLevelService_: InventoryLevelService;
    constructor({ manager, inventoryItemService, inventoryLevelService, reservationItemService, }: InjectedDependencies, options?: unknown, moduleDeclaration?: InternalModuleDeclaration | undefined);
    __joinerConfig(): ModuleJoinerConfig;
    /**
     * Lists inventory items that match the given selector
     * @param selector - the selector to filter inventory items by
     * @param config - the find configuration to use
     * @param context
     * @return A tuple of inventory items and their total count
     */
    listInventoryItems(selector: FilterableInventoryItemProps, config?: FindConfig<InventoryItemDTO>, context?: SharedContext): Promise<[InventoryItemDTO[], number]>;
    list(selector: FilterableInventoryItemProps, config?: FindConfig<InventoryItemDTO>, context?: SharedContext): Promise<InventoryItemDTO[]>;
    /**
     * Lists inventory levels that match the given selector
     * @param selector - the selector to filter inventory levels by
     * @param config - the find configuration to use
     * @param context
     * @return A tuple of inventory levels and their total count
     */
    listInventoryLevels(selector: FilterableInventoryLevelProps, config?: FindConfig<InventoryLevelDTO>, context?: SharedContext): Promise<[InventoryLevelDTO[], number]>;
    /**
     * Lists reservation items that match the given selector
     * @param selector - the selector to filter reservation items by
     * @param config - the find configuration to use
     * @param context
     * @return A tuple of reservation items and their total count
     */
    listReservationItems(selector: FilterableReservationItemProps, config?: FindConfig<ReservationItemDTO>, context?: SharedContext): Promise<[ReservationItemDTO[], number]>;
    /**
     * Retrieves an inventory item with the given id
     * @param inventoryItemId - the id of the inventory item to retrieve
     * @param config - the find configuration to use
     * @param context
     * @return The retrieved inventory item
     */
    retrieveInventoryItem(inventoryItemId: string, config?: FindConfig<InventoryItemDTO>, context?: SharedContext): Promise<InventoryItemDTO>;
    /**
     * Retrieves an inventory level for a given inventory item and location
     * @param inventoryItemId - the id of the inventory item
     * @param locationId - the id of the location
     * @param context
     * @return the retrieved inventory level
     */
    retrieveInventoryLevel(inventoryItemId: string, locationId: string, context?: SharedContext): Promise<InventoryLevelDTO>;
    /**
     * Retrieves a reservation item
     * @param reservationId
     * @param context
     * @param reservationId
     * @param context
     */
    retrieveReservationItem(reservationId: string, context?: SharedContext): Promise<ReservationItemDTO>;
    private ensureInventoryLevels;
    createReservationItems(input: CreateReservationItemInput[], context?: SharedContext): Promise<ReservationItemDTO[]>;
    /**
     * Creates a reservation item
     * @param input - the input object
     * @return The created reservation item
     */
    createReservationItem(input: CreateReservationItemInput, context?: SharedContext): Promise<ReservationItemDTO>;
    createInventoryItems(input: CreateInventoryItemInput[], context?: SharedContext): Promise<InventoryItemDTO[]>;
    /**
     * Creates an inventory item
     * @param input - the input object
     * @param context
     * @return The created inventory item
     */
    createInventoryItem(input: CreateInventoryItemInput, context?: SharedContext): Promise<InventoryItemDTO>;
    createInventoryLevels(input: CreateInventoryLevelInput[], context?: SharedContext): Promise<InventoryLevelDTO[]>;
    /**
     * Creates an inventory item
     * @param input - the input object
     * @param context
     * @return The created inventory level
     */
    createInventoryLevel(input: CreateInventoryLevelInput, context?: SharedContext): Promise<InventoryLevelDTO>;
    /**
     * Updates an inventory item
     * @param inventoryItemId - the id of the inventory item to update
     * @param input - the input object
     * @param context
     * @return The updated inventory item
     */
    updateInventoryItem(inventoryItemId: string, input: Partial<CreateInventoryItemInput>, context?: SharedContext): Promise<InventoryItemDTO>;
    /**
     * Deletes an inventory item
     * @param inventoryItemId - the id of the inventory item to delete
     * @param context
     */
    deleteInventoryItem(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Restore an inventory item and levels
     * @param inventoryItemId - the id of the inventory item to delete
     * @param context
     */
    restoreInventoryItem(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
    deleteInventoryItemLevelByLocationId(locationId: string | string[], context?: SharedContext): Promise<void>;
    deleteReservationItemByLocationId(locationId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes an inventory level
     * @param inventoryItemId - the id of the inventory item associated with the level
     * @param locationId - the id of the location associated with the level
     * @param context
     */
    deleteInventoryLevel(inventoryItemId: string, locationId: string, context?: SharedContext): Promise<void>;
    updateInventoryLevels(updates: ({
        inventory_item_id: string;
        location_id: string;
    } & UpdateInventoryLevelInput)[], context?: SharedContext): Promise<InventoryLevelDTO[]>;
    /**
     * Updates an inventory level
     * @param inventoryItemId - the id of the inventory item associated with the level
     * @param locationId - the id of the location associated with the level
     * @param input - the input object
     * @param context
     * @return The updated inventory level
     */
    updateInventoryLevel(inventoryItemId: string, locationIdOrContext?: string, input?: UpdateInventoryLevelInput, context?: SharedContext): Promise<InventoryLevelDTO>;
    /**
     * Updates a reservation item
     * @param reservationItemId
     * @param input - the input object
     * @param context
     * @param context
     * @return The updated inventory level
     */
    updateReservationItem(reservationItemId: string, input: UpdateReservationItemInput, context?: SharedContext): Promise<ReservationItemDTO>;
    /**
     * Deletes reservation items by line item
     * @param lineItemId - the id of the line item associated with the reservation item
     * @param context
     */
    deleteReservationItemsByLineItem(lineItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Deletes a reservation item
     * @param reservationItemId - the id of the reservation item to delete
     * @param context
     */
    deleteReservationItem(reservationItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * Adjusts the inventory level for a given inventory item and location.
     * @param inventoryItemId - the id of the inventory item
     * @param locationId - the id of the location
     * @param adjustment - the number to adjust the inventory by (can be positive or negative)
     * @param context
     * @return The updated inventory level
     * @throws when the inventory level is not found
     */
    adjustInventory(inventoryItemId: string, locationId: string, adjustment: number, context?: SharedContext): Promise<InventoryLevelDTO>;
    /**
     * Retrieves the available quantity of a given inventory item in a given location.
     * @param inventoryItemId - the id of the inventory item
     * @param locationIds - the ids of the locations to check
     * @param context
     * @return The available quantity
     * @throws when the inventory item is not found
     */
    retrieveAvailableQuantity(inventoryItemId: string, locationIds: string[], context?: SharedContext): Promise<number>;
    /**
     * Retrieves the stocked quantity of a given inventory item in a given location.
     * @param inventoryItemId - the id of the inventory item
     * @param locationIds - the ids of the locations to check
     * @param context
     * @return The stocked quantity
     * @throws when the inventory item is not found
     */
    retrieveStockedQuantity(inventoryItemId: string, locationIds: string[], context?: SharedContext): Promise<number>;
    /**
     * Retrieves the reserved quantity of a given inventory item in a given location.
     * @param inventoryItemId - the id of the inventory item
     * @param locationIds - the ids of the locations to check
     * @param context
     * @return The reserved quantity
     * @throws when the inventory item is not found
     */
    retrieveReservedQuantity(inventoryItemId: string, locationIds: string[], context?: SharedContext): Promise<number>;
    /**
     * Confirms whether there is sufficient inventory for a given quantity of a given inventory item in a given location.
     * @param inventoryItemId - the id of the inventory item
     * @param locationIds - the ids of the locations to check
     * @param quantity - the quantity to check
     * @param context
     * @return Whether there is sufficient inventory
     */
    confirmInventory(inventoryItemId: string, locationIds: string[], quantity: number, context?: SharedContext): Promise<boolean>;
}
export {};
