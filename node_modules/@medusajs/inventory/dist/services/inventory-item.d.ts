import { CreateInventoryItemInput, FilterableInventoryItemProps, FindConfig, IEventBusService, InventoryItemDTO, SharedContext } from "@medusajs/types";
import { DeepPartial, EntityManager } from "typeorm";
import { InventoryItem } from "../models";
type InjectedDependencies = {
    eventBusService: IEventBusService;
    manager: EntityManager;
};
export default class InventoryItemService {
    static Events: {
        CREATED: string;
        UPDATED: string;
        DELETED: string;
        RESTORED: string;
    };
    protected readonly manager_: EntityManager;
    protected readonly eventBusService_: IEventBusService | undefined;
    constructor({ eventBusService, manager }: InjectedDependencies);
    /**
     * @param selector - Filter options for inventory items.
     * @param config - Configuration for query.
     * @param context
     * @return Resolves to the list of inventory items that match the filter.
     */
    list(selector?: FilterableInventoryItemProps, config?: FindConfig<InventoryItem>, context?: SharedContext): Promise<InventoryItemDTO[]>;
    /**
     * Retrieves an inventory item by its id.
     * @param inventoryItemId - the id of the inventory item to retrieve.
     * @param config - the configuration options for the find operation.
     * @param context
     * @return The retrieved inventory item.
     * @throws If the inventory item id is not defined or if the inventory item is not found.
     */
    retrieve(inventoryItemId: string, config?: FindConfig<InventoryItem>, context?: SharedContext): Promise<InventoryItem>;
    /**
     * @param selector - Filter options for inventory items.
     * @param config - Configuration for query.
     * @param context
     * @return - Resolves to the list of inventory items that match the filter and the count of all matching items.
     */
    listAndCount(selector?: FilterableInventoryItemProps, config?: FindConfig<InventoryItem>, context?: SharedContext): Promise<[InventoryItemDTO[], number]>;
    /**
     * @param data
     * @param context
     * @param data
     * @param context
     */
    create(data: CreateInventoryItemInput[], context?: SharedContext): Promise<InventoryItem[]>;
    /**
     * @param inventoryItemId - The id of the inventory item to update.
     * @param data
     * @param context
     * @param context
     * @return The updated inventory item.
     */
    update(inventoryItemId: string, data: Omit<DeepPartial<InventoryItem>, "id" | "created_at" | "metadata" | "deleted_at">, context?: SharedContext): Promise<InventoryItem>;
    /**
     * @param inventoryItemId - The id of the inventory item to delete.
     * @param context
     */
    delete(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
    /**
     * @param inventoryItemId - The id of the inventory item to restore.
     * @param context
     */
    restore(inventoryItemId: string | string[], context?: SharedContext): Promise<void>;
}
export {};
