"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getListQuery = void 0;
const utils_1 = require("@medusajs/utils");
const typeorm_1 = require("typeorm");
const models_1 = require("../models");
const build_query_1 = require("./build-query");
function getListQuery(manager, selector = {}, config = { relations: [], skip: 0, take: 10 }) {
    const inventoryItemRepository = manager.getRepository(models_1.InventoryItem);
    const { q, ...selectorRest } = selector;
    const query = (0, build_query_1.buildQuery)(selectorRest, config);
    const queryBuilder = inventoryItemRepository.createQueryBuilder("inv_item");
    if ("location_id" in query.where) {
        const locationIds = Array.isArray(selector.location_id)
            ? selector.location_id
            : [selector.location_id];
        queryBuilder.innerJoin("inventory_level", "level", "level.inventory_item_id = inv_item.id AND level.location_id IN (:...locationIds)", { locationIds });
        delete query.where.location_id;
    }
    if (q) {
        queryBuilder.where(query.where).andWhere(new typeorm_1.Brackets((qb) => {
            qb.where("inv_item.sku ILike :q", { q: `%${q}%` })
                .orWhere("inv_item.description ILike :q", { q: `%${q}%` })
                .orWhere("inv_item.title ILike :q", { q: `%${q}%` });
        }));
    }
    else {
        queryBuilder.where(query.where);
    }
    if (query.take) {
        queryBuilder.take(query.take);
    }
    if (query.skip) {
        queryBuilder.skip(query.skip);
    }
    if (query.select) {
        const legacySelect = (0, utils_1.objectToStringPath)(query.select);
        queryBuilder.select(legacySelect.map((s) => "inv_item." + s));
    }
    if (query.withDeleted) {
        queryBuilder.withDeleted();
    }
    if (query.order) {
        const toSelect = [];
        const parsed = Object.entries(query.order).reduce((acc, [k, v]) => {
            const key = `inv_item.${k}`;
            if (!query.select?.[k]) {
                toSelect.push(key);
            }
            acc[key] = v;
            return acc;
        }, {});
        queryBuilder.addSelect(toSelect);
        queryBuilder.orderBy(parsed);
    }
    return queryBuilder;
}
exports.getListQuery = getListQuery;
//# sourceMappingURL=query.js.map