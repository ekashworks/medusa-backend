"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const modules_sdk_1 = require("@medusajs/modules-sdk");
const utils_1 = require("@medusajs/utils");
const awilix_1 = require("awilix");
const typeorm_1 = require("typeorm");
const StockLocationModels = __importStar(require("../models"));
exports.default = async ({ options, container }, moduleDeclaration) => {
    if (moduleDeclaration?.scope === modules_sdk_1.MODULE_SCOPE.INTERNAL &&
        moduleDeclaration.resources === modules_sdk_1.MODULE_RESOURCE_TYPE.SHARED) {
        return;
    }
    const dbData = options?.database;
    if (!dbData) {
        throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_ARGUMENT, `Database config is not present at module config "options.database"`);
    }
    const entities = Object.values(StockLocationModels);
    const dataSource = new typeorm_1.DataSource({
        type: dbData.type,
        url: dbData.url,
        database: dbData.database,
        extra: dbData.extra || {},
        schema: dbData.schema,
        entities,
        logging: dbData.logging,
    });
    await dataSource.initialize();
    container.register({
        manager: (0, awilix_1.asValue)(dataSource.manager),
    });
};
//# sourceMappingURL=connection.js.map