import { InternalModuleDeclaration } from "@medusajs/modules-sdk";
import { CreateStockLocationInput, FilterableStockLocationProps, FindConfig, IEventBusService, ModuleJoinerConfig, SharedContext, StockLocationAddressInput, UpdateStockLocationInput } from "@medusajs/types";
import { EntityManager } from "typeorm";
import { StockLocation, StockLocationAddress } from "../models";
type InjectedDependencies = {
    manager: EntityManager;
    eventBusService: IEventBusService;
};
/**
 * Service for managing stock locations.
 */
export default class StockLocationService {
    protected readonly moduleDeclaration?: InternalModuleDeclaration | undefined;
    static Events: {
        CREATED: string;
        UPDATED: string;
        DELETED: string;
    };
    protected readonly manager_: EntityManager;
    protected readonly eventBusService_: IEventBusService;
    constructor({ eventBusService, manager }: InjectedDependencies, options?: unknown, moduleDeclaration?: InternalModuleDeclaration | undefined);
    __joinerConfig(): ModuleJoinerConfig;
    /**
     * Lists all stock locations that match the given selector.
     * @param selector - Properties to filter by.
     * @param config - Additional configuration for the query.
     * @param context
     * @return A list of stock locations.
     */
    list(selector?: FilterableStockLocationProps, config?: FindConfig<StockLocation>, context?: SharedContext): Promise<StockLocation[]>;
    /**
     * Lists all stock locations that match the given selector and returns the count of matching stock locations.
     * @param selector - Properties to filter by.
     * @param config - Additional configuration for the query.
     * @param context
     * @return A list of stock locations and the count of matching stock locations.
     */
    listAndCount(selector?: FilterableStockLocationProps, config?: FindConfig<StockLocation>, context?: SharedContext): Promise<[StockLocation[], number]>;
    /**
     * Retrieves a Stock Location by its ID.
     * @param stockLocationId - The ID of the stock location.
     * @param config - Additional configuration for the query.
     * @param context
     * @return The stock location.
     * @throws If the stock location ID is not definedor the stock location with the given ID was not found.
     */
    retrieve(stockLocationId: string, config?: FindConfig<StockLocation>, context?: SharedContext): Promise<StockLocation>;
    /**
     * Creates a new stock location.
     * @param data - The input data for creating a Stock Location.
     * @param context
     * @returns The created stock location.
     */
    create(data: CreateStockLocationInput, context?: SharedContext): Promise<StockLocation>;
    /**
     * Updates an existing stock location.
     * @param stockLocationId - The ID of the stock location to update.
     * @param updateData - The update data for the stock location.
     * @param context
     * @returns The updated stock location.
     */
    update(stockLocationId: string, updateData: UpdateStockLocationInput, context?: SharedContext): Promise<StockLocation>;
    /**
     * Updates an address for a Stock Location.
     * @param addressId - The ID of the address to update.
     * @param address - The update data for the address.
     * @param context
     * @returns The updated stock location address.
     */
    protected updateAddress(addressId: string, address: StockLocationAddressInput, context?: SharedContext): Promise<StockLocationAddress>;
    /**
     * Deletes a Stock Location.
     * @param id - The ID of the stock location to delete.
     * @param context
     * @returns An empty promise.
     */
    delete(id: string, context?: SharedContext): Promise<void>;
}
export {};
